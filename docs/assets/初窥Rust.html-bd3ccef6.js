import{_ as e,o as d,c,e as a}from"./app-a06da188.js";const o={},t=a('<h1 id="初窥-rust" tabindex="-1"><a class="header-anchor" href="#初窥-rust" aria-hidden="true">#</a> 初窥 <code>Rust</code></h1><p>一个月前开始系统地学习 <code>Rust</code>，每天下班后一点一点地看官方文档，今天慢慢开始正经地写一点点代码了。</p><p><code>Rust</code> 官方提供了两种学习模式，各一个文档：</p><ul><li>《The Rust Programming Language》，这个文档对 <code>Rust</code> 各部分进行了系统的介绍</li><li>《Rust By Example》，这个文档展示了一个个小例子</li></ul><p>之前学习新的编程语言基本上都是通过跟着书本或者文档写许多示例代码。</p><p>这次换了个打法，因为平时写代码的机会很多，也不太想直接就上手写代码，所以我选择了《The Rust Programming Language》。</p><h2 id="将错误尽早地暴露出来" tabindex="-1"><a class="header-anchor" href="#将错误尽早地暴露出来" aria-hidden="true">#</a> 将错误尽早地暴露出来</h2><p><code>Rust</code> 很在未来很有可能会替代 <code>C++</code>。 对于我这种编程经验很一般的程序员来说，用 <code>C++</code> 编写一个程序，在整个开发周期中，很大一部分的时间都在解决编译、空指针和段错误的问题。使用 <code>Rust</code> 开发程序有如下好处：</p><ul><li>与 <code>C、CPP</code> 几乎相当的性能</li><li>尽早地将错误暴露出来</li><li>似乎完全不用管编译的问题，直接 <code>cargo run</code> 就可以了</li><li><code>Rust</code> 的编译提示非常的智能、友好。</li><li>......</li></ul><p>当然劣势也很明显咯，就是生态还是差了一些。学习曲线比 <code>C</code> 陡峭应该是没有异议的，与 <code>CPP</code> 相比的话就因人而异了。</p><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h2><h2 id="后记" tabindex="-1"><a class="header-anchor" href="#后记" aria-hidden="true">#</a> 后记</h2><p>尝试一些新事物新方法，常常会得到新收获</p>',13),i=[t];function r(s,l){return d(),c("div",null,i)}const n=e(o,[["render",r],["__file","初窥Rust.html.vue"]]);export{n as default};
