import{_ as s,o as e,c as a,e as n}from"./app-f2dc7f3e.js";const i="/blog/assets/ssh-key-saved-path-025cfa76.png",c={},d=n(`<h1 id="服务器免密登录-ssh-公钥配置" tabindex="-1"><a class="header-anchor" href="#服务器免密登录-ssh-公钥配置" aria-hidden="true">#</a> 服务器免密登录：<code>ssh</code> 公钥配置</h1><p>我们知道，用 <code>ssh &lt;用户名&gt;@&lt;ip地址&gt;</code> 登录远程服务器的时候，是需要输入登录密码的，有时候就很烦，比如以下情况：</p><ol><li>在密码比较复杂的时候，你要花费很长时间来输入密码；</li><li>你在使用git的时候进行频繁提交：使用代码托管平台以及自建的git服务器。</li></ol><blockquote><p>实际上有一种解决方法——ssh免密验证。</p></blockquote><h2 id="步骤概览" tabindex="-1"><a class="header-anchor" href="#步骤概览" aria-hidden="true">#</a> 步骤概览：</h2><ol><li>在本地生成公钥</li><li>将本地公钥存储在远程主机上</li><li>开启远程主机上的ssh公钥认证登录功能</li></ol><h3 id="_1-生成公钥" tabindex="-1"><a class="header-anchor" href="#_1-生成公钥" aria-hidden="true">#</a> 1. 生成公钥</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># -t 指定加密算法；</span>
<span class="token comment"># -b 指定生成的密钥长度；</span>
<span class="token comment"># -C 一段字符，一般都填邮箱地址。</span>
<span class="token comment"># 更多参数说明可以在终端输入：ssh-keygen --help 查看</span>
ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-b</span> <span class="token number">4096</span> <span class="token parameter variable">-C</span> <span class="token string">&quot;你的邮箱地址&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这条命令执行完之后，会提示你指定公钥和私钥的存储位置。 <img src="`+i+`" alt="深度截图_选择区域_20180803235726.png"> 截图中指定的是 <code>/home/xu/test</code> 这个位置，届时私钥就存储在 <code>/home/xu/test</code>，公钥存储在 <code>/home/xu/test.pub</code>。公钥和私钥是成对的</p><h3 id="_2-将公钥存储到远程主机" tabindex="-1"><a class="header-anchor" href="#_2-将公钥存储到远程主机" aria-hidden="true">#</a> 2. 将公钥存储到远程主机</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># i后面接的参数是保存你公钥的文件(我们这里是.ssh/id_rsa.pub)；</span>
<span class="token comment"># git是远程主机的用户，这条指令会往git这个用户的主目录下的</span>
<span class="token comment"># .ssh/authorized_keys文件写入id_rsa.pub保存的公钥</span>
ssh-copy-id <span class="token parameter variable">-i</span> .ssh/id_rsa.pub git@12.56.224.61  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>网上好多教程说直接将公钥内容写到 <code>.ssh/authorized_keys</code> 就可以了，我是没成功，最后还是用这条命令写入才成功的。（后续添加公钥倒是可以直接添加文本内容到.ssh/authorized_keys，一个公钥一行。也许ssh-copy-id命令还做了其他事情吧。你可以执行 <code>cat /usr/bin/ssh-copy-id</code> 看一下它的内容）</p></blockquote><h3 id="_3-开启远程主机ssh的公钥登录" tabindex="-1"><a class="header-anchor" href="#_3-开启远程主机ssh的公钥登录" aria-hidden="true">#</a> 3. 开启远程主机ssh的公钥登录</h3><p>检查 <code>ssh</code> 服务的配置文件—— <code>/etc/ssh/sshd_config</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>RSAAuthentication <span class="token function">yes</span>    <span class="token comment"># 这行一定要取消注释的（删掉#号）</span>
PubkeyAuthentication <span class="token function">yes</span>    <span class="token comment"># 我的服务器没这行，不添加似乎也能用</span>
AuthorizedKeysFile .ssh/authorized_keys    <span class="token comment"># 我的服务器没这行，不添加似乎也能用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启 <code>ssh</code> 服务: <code>systemctl restart sshd</code></p>`,16),t=[d];function o(l,r){return e(),a("div",null,t)}const p=s(c,[["render",o],["__file","服务器免密登录-ssh公钥配置.html.vue"]]);export{p as default};
