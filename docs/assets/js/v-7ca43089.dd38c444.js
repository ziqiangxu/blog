"use strict";(self.webpackChunkziqiangxu_github_io=self.webpackChunkziqiangxu_github_io||[]).push([[2907],{4953:(e,a,t)=>{t.r(a),t.d(a,{data:()=>i});const i={key:"v-7ca43089",path:"/data-structure/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E7%BA%BF%E6%80%A7%E8%A1%A8.html",title:"线性表",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"按存储方式分类",slug:"按存储方式分类",children:[]},{level:2,title:"线性链表的其它变形",slug:"线性链表的其它变形",children:[]},{level:2,title:"重要相关概念",slug:"重要相关概念",children:[]}],filePathRelative:"data-structure/第二章-线性表.md",git:{updatedTime:1627719476e3}}},7583:(e,a,t)=>{t.r(a),t.d(a,{default:()=>r});const i=(0,t(6252).uE)('<h1 id="线性表" tabindex="-1"><a class="header-anchor" href="#线性表" aria-hidden="true">#</a> 线性表</h1><p><strong>线性表：</strong> 一个有限序列，每个表项是相继排列的，每两个相邻表项都有直接前驱和直接后继关系。</p><h2 id="按存储方式分类" tabindex="-1"><a class="header-anchor" href="#按存储方式分类" aria-hidden="true">#</a> 按存储方式分类</h2><p><strong>顺序表：</strong> 基于数组的存储表示，结点逻辑顺序和物理顺序一致。 <strong>单链表：</strong> 每个结点有data和link两个域。用link域（指针）表示结点间的逻辑关系，结点逻辑顺序和物理顺序不一定一样。</p><h2 id="线性链表的其它变形" tabindex="-1"><a class="header-anchor" href="#线性链表的其它变形" aria-hidden="true">#</a> 线性链表的其它变形</h2><ul><li>循环链表：最后一个结点的link域指向开始结点。【单链表是指向NULL】</li><li>双向链表：每个结点有前驱指针（左指针）和后继指针（右指针）两个link域。</li></ul><h2 id="重要相关概念" tabindex="-1"><a class="header-anchor" href="#重要相关概念" aria-hidden="true">#</a> 重要相关概念</h2><ul><li>附加头结点：在链表第一个结点前增加“附加头结点”，它的data域可以不存放数据，也可以存放特殊标致或者表长。这样使空表与非空表第一个结点插入数据可以不作为特殊情况处理。</li></ul>',8),r={render:function(e,a){return i}}}}]);