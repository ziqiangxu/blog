"use strict";(self.webpackChunkziqiangxu_github_io=self.webpackChunkziqiangxu_github_io||[]).push([[6355],{1855:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-1aeaed70",path:"/software-engineering/software-release-and-maintain-flow-practice.html",title:"软件发布和维护流程实践",lang:"en-US",frontmatter:{title:"软件发布和维护流程实践"},excerpt:"",headers:[{level:2,title:"软件的各个阶段",slug:"软件的各个阶段",children:[{level:3,title:"1. 开发阶段",slug:"_1-开发阶段",children:[]},{level:3,title:"2. 构建阶段",slug:"_2-构建阶段",children:[]},{level:3,title:"3. 测试阶段",slug:"_3-测试阶段",children:[]},{level:3,title:"4. 部署阶段",slug:"_4-部署阶段",children:[]},{level:3,title:"5. 维护阶段",slug:"_5-维护阶段",children:[]}]},{level:2,title:"如何修复一个线上系统的缺陷？",slug:"如何修复一个线上系统的缺陷",children:[]}],filePathRelative:"software-engineering/software-release-and-maintain-flow-practice.md",git:{updatedTime:1636297654e3}}},2698:(n,a,s)=>{s.r(a),s.d(a,{default:()=>c});var e=s(6252);const p=(0,e.Wm)("p",null,"在软件的整个生命周期中，测试和维护是十分重要的几个环节。",-1),l=(0,e.Uk)("根据"),r={href:"https://semver.org/lang/zh-CN/",target:"_blank",rel:"noopener noreferrer"},t=(0,e.Uk)("语义化版本管理规范"),i=(0,e.Uk)("，版本使用这样的形式："),o=(0,e.uE)('<p>major.minor.patch / 主版本号.次版本号.修订号</p><p>如：<code>1.0.0-beta.3</code></p><h2 id="软件的各个阶段" tabindex="-1"><a class="header-anchor" href="#软件的各个阶段" aria-hidden="true">#</a> 软件的各个阶段</h2><ol><li>开发，规划好各个版本应该具备的功能</li><li>构建，使用语义化版本管理规范，编写更新文档</li><li>测试，将程序部署到测试环境，并准备好前置条件，对各项功能进行完整的测试，发现影响使用的缺陷则再次回到开发阶段</li><li>部署，将程序部署到生产环境，用户开始使用</li><li>维护，用户发现问题，反馈给开发人员</li></ol><h3 id="_1-开发阶段" tabindex="-1"><a class="header-anchor" href="#_1-开发阶段" aria-hidden="true">#</a> 1. 开发阶段</h3><p>需要做好版本的规划，在 1.2.x 要加入什么功能， 1.3.x 要加入什么功能。如果不做规划，软件一直在开发过程中，迟迟无法发布，也得不到用户的反馈。</p><p>当然，规划也应根据业务的需要再做适当的调整。</p><p>规划版本的功能开发完毕，基本的测试通过（主要是单元测试和 UI 测试），则进入构建阶段。</p><h3 id="_2-构建阶段" tabindex="-1"><a class="header-anchor" href="#_2-构建阶段" aria-hidden="true">#</a> 2. 构建阶段</h3><p>根据规划给构建好的软件做好版本标记，并发布更新日志。</p><blockquote><p>一定要将版本信息放到用户容易获得的地方，方便报告缺陷，特别是在你不清楚用户使用的哪个版本的时候。</p></blockquote><h3 id="_3-测试阶段" tabindex="-1"><a class="header-anchor" href="#_3-测试阶段" aria-hidden="true">#</a> 3. 测试阶段</h3><p>将构建好的程序部署到测试环境，并准备好前置条件，安排测试人员对各项功能进行完整的测试，并对发现的缺陷进行等级划分（产品经理），根据缺陷的级别确定是否发布到线上系统。</p><blockquote><p>在没有专职的测试人员的时候，建议编写一个测试用例模板文件，由各开发人员轮流承担测试工作，并填写相应的用例模板作为测试报告。</p></blockquote><h3 id="_4-部署阶段" tabindex="-1"><a class="header-anchor" href="#_4-部署阶段" aria-hidden="true">#</a> 4. 部署阶段</h3><p>将软件部署到生产环境，并将更新日志通知到用户。</p><h3 id="_5-维护阶段" tabindex="-1"><a class="header-anchor" href="#_5-维护阶段" aria-hidden="true">#</a> 5. 维护阶段</h3><p>软件势必会有缺陷，我们应当给用户提供一个便于报告缺陷的途径。</p><h2 id="如何修复一个线上系统的缺陷" tabindex="-1"><a class="header-anchor" href="#如何修复一个线上系统的缺陷" aria-hidden="true">#</a> 如何修复一个线上系统的缺陷？</h2><p>假设线上系统版本为 1.2.0, 此版本代码分支为 1.2.x。开发人员在紧锣密鼓地开发 1.3.0, 代码分支为 1.3.x。</p><p>此时线上系统发现了缺陷，我们收到了缺陷的报告。先确定该缺陷的级别（产品经理），如果不需要立即修复或者难以立马修复则规划到下一个次版本（1.3.0）中。需要立即修复，则按照如下的流程进行：</p><ul><li>切换到线上系统所在的代码分支 1.2.x</li><li>基于线上系统的代码分支创建一个补丁分支</li><li>修复问题之后请求合并到 1.2.x 和 1.3.x 分支，这样后续的 1.3.x 也可以获得这个缺陷的修复</li><li>进入构建阶段，并将版本更新为 1.2.1，编写更新日志</li><li>进入测试阶段，由于此次更新是一个较小的缺陷的修复，只对该缺陷对应的范围进行测试即可</li><li>发布到生产环境</li></ul><p>按照这种流程维护，简化后的代码分支结构图如下所示（可通过 <code>git log --graph</code> 获得类似的字符图像）：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">|</span>      <span class="token punctuation">(</span><span class="token number">1.4</span>.x分支<span class="token punctuation">)</span>\n<span class="token operator">|</span>     /\n<span class="token operator">|</span>    /\n<span class="token number">1.4</span>.0\n<span class="token operator">|</span>\n* __      <span class="token punctuation">(</span><span class="token number">1.3</span>.x 分支，线上运行的版本）\n<span class="token operator">|</span>    <span class="token punctuation">\\</span>   /\n<span class="token operator">|</span>     <span class="token punctuation">\\</span> /\n<span class="token operator">|</span>      <span class="token number">1.3</span>.1\n<span class="token operator">|</span>     /\n<span class="token operator">|</span>    /\n<span class="token number">1.3</span>.0       \n<span class="token operator">|</span>            \n* _____      <span class="token punctuation">(</span><span class="token number">1.2</span>.x 分支，线上运行的版本，随着 <span class="token number">1.3</span>.0 的发布，应当下线<span class="token punctuation">)</span>\n<span class="token operator">|</span>       <span class="token punctuation">\\</span>   /\n<span class="token operator">|</span>        <span class="token punctuation">\\</span> / \n* __     <span class="token number">1.2</span>.2\n<span class="token operator">|</span>    <span class="token punctuation">\\</span>   /\n<span class="token operator">|</span>     <span class="token punctuation">\\</span> /\n<span class="token operator">|</span>      <span class="token number">1.2</span>.1\n<span class="token operator">|</span>     /\n<span class="token operator">|</span>    /\n<span class="token number">1.2</span>.0\n<span class="token operator">|</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div>',24),c={render:function(n,a){const s=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[p,(0,e.Wm)("p",null,[l,(0,e.Wm)("a",r,[t,(0,e.Wm)(s)]),i]),o],64)}}}}]);