"use strict";(self.webpackChunkziqiangxu_github_io=self.webpackChunkziqiangxu_github_io||[]).push([[3312],{9577:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-7d54d9d8",path:"/Qt/Get-the-address-of-signal-sender-in-Qt.html",title:"Qt 获取信号发送者的地址",lang:"en-US",frontmatter:{},excerpt:"",headers:[],filePathRelative:"Qt/Get-the-address-of-signal-sender-in-Qt.md",git:{updatedTime:1595018101e3,contributors:[{name:"daryl",email:"ziqiang_xu@qq.com",commits:2},{name:"Daryl.Xu",email:"ziqiang_xu@yeah.net",commits:1}]}}},5555:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const t=(0,a(6252).uE)('<h1 id="qt-获取信号发送者的地址" tabindex="-1"><a class="header-anchor" href="#qt-获取信号发送者的地址" aria-hidden="true">#</a> <code>Qt</code> 获取信号发送者的地址</h1><p>首先我们会定义 <code>input</code> 是一个 <code>QLineEdit</code> 类型的指针变量（ <code>connect</code> 的参数须是地址）</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token function">connect</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QLineEdit<span class="token double-colon punctuation">::</span>returnPressed<span class="token punctuation">,</span>\n            <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> input<span class="token punctuation">)</span> <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token string">&quot;测试成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//sender()函数会返回信号发送者的指针</span>\n   <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token function">sender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>拿到地址了就可以进行更多操作了，打开你的脑洞吧</p><p>注意：</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token string">&quot;使用形式一&quot;</span><span class="token punctuation">)</span>   <span class="token comment">//不需要include QDebug</span>\n<span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;使用形式二&quot;</span>  <span class="token comment">//需要引入QDebug类</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',6),p={render:function(n,s){return t}}}}]);