"use strict";(self.webpackChunkziqiangxu_github_io=self.webpackChunkziqiangxu_github_io||[]).push([[1952],{3678:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-32111efd",path:"/Python/pipenv-simple-tutorial.html",title:"pipenv简要教程",lang:"en-US",frontmatter:{date:"2021-04-24T00:00:00.000Z",title:"pipenv简要教程"},excerpt:"",headers:[{level:2,title:"创建虚拟环境",slug:"创建虚拟环境",children:[]},{level:2,title:"使用虚拟环境",slug:"使用虚拟环境",children:[]},{level:2,title:"利用Pipfile和Pipfile.lock快速恢复虚拟环境",slug:"利用pipfile和pipfile-lock快速恢复虚拟环境",children:[]}],filePathRelative:"Python/pipenv-simple-tutorial.md",git:{updatedTime:1629041842e3}}},5708:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const e=(0,a(6252).uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 安装 `pipenv` 命令</span>\npip3 <span class="token function">install</span> pipenv\npipenv --version <span class="token comment"># 请保证 ~/.local/bin 被添加到 PATH 环境变量中</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="创建虚拟环境" tabindex="-1"><a class="header-anchor" href="#创建虚拟环境" aria-hidden="true">#</a> 创建虚拟环境</h2><p>在项目根目录执行 <code>pipenv shell --python path/to/specified/python</code></p><p>使用指定版本的 <code>python</code> 解释器来创建虚拟环境，在执行成功后，项目根目录会自动生成一个<code>Pipfile</code>。</p><div class="language-toml ext-toml line-numbers-mode"><pre class="language-toml"><code><span class="token comment"># Pipfile文件的内容</span>\n<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token table class-name">source</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\n<span class="token comment"># 软件源相关设置</span>\n<span class="token key property">url</span> <span class="token punctuation">=</span> <span class="token string">&quot;https://pypi.org/simple&quot;</span>\n<span class="token key property">verify_ssl</span> <span class="token punctuation">=</span> <span class="token boolean">true</span>\n<span class="token key property">name</span> <span class="token punctuation">=</span> <span class="token string">&quot;pypi&quot;</span>\n\n<span class="token punctuation">[</span><span class="token table class-name">packages</span><span class="token punctuation">]</span>\n<span class="token comment"># 项目运行时需要的依赖包</span>\n\n<span class="token punctuation">[</span><span class="token table class-name">dev-packages</span><span class="token punctuation">]</span>\n<span class="token comment"># 项目开发时需要的依赖包</span>\n\n<span class="token punctuation">[</span><span class="token table class-name">requires</span><span class="token punctuation">]</span>\n<span class="token key property">python_version</span> <span class="token punctuation">=</span> <span class="token string">&quot;3.6&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><blockquote><p><code>python</code> 的多版本管理推荐使用 <code>miniconda</code></p></blockquote><h2 id="使用虚拟环境" tabindex="-1"><a class="header-anchor" href="#使用虚拟环境" aria-hidden="true">#</a> 使用虚拟环境</h2><blockquote><p>特别注意：以下命令均需要在项目根目录执行</p></blockquote><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 激活项目的虚拟环境</span>\npipenv shell\n\n<span class="token comment"># 安装运行时依赖包，执行成功后软件包将被添加到 Pipfile 的 packages 下</span>\npipenv <span class="token function">install</span> <span class="token assign-left variable">xxx</span><span class="token operator">==</span><span class="token number">0.0</span>.1\n\n<span class="token comment"># 安装开发依赖包，执行成功后软件包将被添加到 Pipfile 的 dev-packages 下</span>\npipenv <span class="token function">install</span> --dev <span class="token assign-left variable">xxx</span><span class="token operator">==</span><span class="token number">0.0</span>.1\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>在上述命令执行结束之后，会有一个 <code>Pipfile.lock</code> 文件生成，这个 <code>Pipfile.lock</code> 记录了「依赖包」和「依赖包的依赖」的信息，这些信息包含名字、具体版本、<code>markers</code>、<code>hash</code>和安装源。</p><blockquote><p>特别注意：<code>Pipfile</code> 和 <code>Pipfile.lock</code> 这两个文件务必纳入版本管理。 直接使用 <code>pip</code> 命令安装软件包不会更新 <code>Pipfile</code> 和 <code>Pipfile.lock</code></p></blockquote><h2 id="利用pipfile和pipfile-lock快速恢复虚拟环境" tabindex="-1"><a class="header-anchor" href="#利用pipfile和pipfile-lock快速恢复虚拟环境" aria-hidden="true">#</a> 利用Pipfile和Pipfile.lock快速恢复虚拟环境</h2><p>得益于 <code>Pipfile.lock</code> 强大的表达能力，它可以很准确地描述一个虚拟环境。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 假设某项目结构如下所示</span>\npipenv-test/\n├── appname\n│   └── test.py\n├── Pipfile\n└── Pipfile.lock\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>我们使用以下命令就可以快速创建一个尽可能一致的环境</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> pipenv-test\npipenv shell --python path/to/specified/python  <span class="token comment"># 创建虚拟环境</span>\npipenv <span class="token function">install</span>  <span class="token comment"># 安装运行时依赖包</span>\npipenv <span class="token function">install</span> --dev  <span class="token comment"># 安装包括开发时需要的依赖包</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',16),p={render:function(n,s){return e}}}}]);