"use strict";(self.webpackChunkziqiangxu_github_io=self.webpackChunkziqiangxu_github_io||[]).push([[4085],{6250:(e,t,a)=>{a.r(t),a.d(t,{data:()=>i});const i={key:"v-e332cbd8",path:"/software-engineering/thoughts-on-design-pattern.html",title:"设计模式笔记",lang:"en-US",frontmatter:{title:"设计模式笔记",date:"2021-10-31T00:00:00.000Z",meta:[{name:"keywords",content:"软件工程 设计模式 面向对象"}]},excerpt:"",headers:[{level:2,title:"设计原则",slug:"设计原则",children:[]},{level:2,title:"有哪些设计模式？",slug:"有哪些设计模式",children:[{level:3,title:"策略模式 (Strategy Pattern)",slug:"策略模式-strategy-pattern",children:[]}]}],filePathRelative:"software-engineering/thoughts-on-design-pattern.md",git:{updatedTime:1635686997e3}}},1913:(e,t,a)=>{a.r(t),a.d(t,{default:()=>r});const i=(0,a(6252).uE)('<p>最近在读 《Head First 设计模式》，从书中摘取了一些设计原则</p><p>我们总是需要花许多时间在第一版软件开发之后，系统的维护和变化，比原先开发的时间多得多，所以我们要致力于提高可维护性和可扩展性。</p><p>使用设计模式，就能达到上述的目的。因为设计模式是历经验证的 <code>OO（Object Oriented）</code> 设计经验</p><h2 id="设计原则" tabindex="-1"><a class="header-anchor" href="#设计原则" aria-hidden="true">#</a> 设计原则</h2><ul><li>利用其他开发人员的经验与智慧</li><li>找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起</li><li>针对接口编程而不是针对实现编程</li><li>多用组合，少用继承</li></ul><h2 id="有哪些设计模式" tabindex="-1"><a class="header-anchor" href="#有哪些设计模式" aria-hidden="true">#</a> 有哪些设计模式？</h2><h3 id="策略模式-strategy-pattern" tabindex="-1"><a class="header-anchor" href="#策略模式-strategy-pattern" aria-hidden="true">#</a> 策略模式 (Strategy Pattern)</h3><p>定义了算法族，分别封装，让他们之间可以相互替换，此模式让算法的变化独立于使用算法的客户。</p>',8),r={render:function(e,t){return i}}}}]);