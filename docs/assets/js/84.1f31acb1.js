(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{454:function(t,a,s){"use strict";s.r(a);var e=s(42),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"第四章-数组、串与广义表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第四章-数组、串与广义表"}},[t._v("#")]),t._v(" 第四章 数组、串与广义表")]),t._v(" "),s("h2",{attrs:{id:"数组部分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组部分"}},[t._v("#")]),t._v(" 数组部分")]),t._v(" "),s("blockquote",[s("p",[t._v("主要讲了普通数组的存储和特殊矩阵的压缩存储。")])]),t._v(" "),s("ul",[s("li",[t._v("多维数组：二维数组可以用以一维数组为元素的一维数组表示，三维数组可以用二维数组和一维数组表示（一般是以行优先表示的）。")]),t._v(" "),s("li",[t._v("对称矩阵：a(i,j)等于a(j,i)，所以只需要存储大约一半的数据。")]),t._v(" "),s("li",[t._v("稀疏矩阵：因为矩阵内部大部分元素为0，所以只需要存储非零项就OK了，这样可以节省大量的空间，使用一个三元组结构体的数组存放非0项。")])]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Trituple")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" row"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" col"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//存放元素在矩阵中的位置")]),t._v("\n    T value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("关于稀疏矩阵的转置，也有很巧妙的解决办法。转置操作需要对元素进行重新排列：使用普通的循环即可完成排序工作，")]),t._v(" "),s("blockquote",[s("p",[t._v("【一种优化方法：扫描所有的元素，使用两个辅助数组记录每行的元素数目和起始元素的列号。然后按照转置的定义重新排列元素】")])]),t._v(" "),s("h2",{attrs:{id:"串部分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#串部分"}},[t._v("#")]),t._v(" 串部分")]),t._v(" "),s("p",[t._v("主要是字符串")]),t._v(" "),s("h2",{attrs:{id:"广义表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#广义表"}},[t._v("#")]),t._v(" 广义表")]),t._v(" "),s("p",[t._v("广义表简称表，是线性表的推广，广义表中的元素可以是数据元素（原子）和子表。")]),t._v(" "),s("p",[t._v("广义表的定义是递归的，因为在表的描述中又用到了表，允许表中有表。\nLS=(a0, a1, a2, ... )")]),t._v(" "),s("p",[t._v("表的表示方法，依然用到了结点的概念。用结点表示一个元素，这个结点分为3个部分：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("标志域utype")]),t._v(" "),s("th",[t._v("信息域info")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("尾指针域tlink")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("0")]),t._v(" "),s("td",[t._v("引用数ref")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("指向同层下一个结点")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),s("td",[t._v("元素值value")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}})]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),s("td",[t._v("子表的链接")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}})])])]),t._v(" "),s("p",[s("code",[t._v("utype=0")]),t._v(" 时，该结点是附加头结点，ref记录了本表被引用——作为表元素的次数。\n每一个子表都有一个附加头，这样做在删除一个表的第一个结点的时候会很方便。因为不用修改指向该表的指针，此时该表的地址用附加头的地址表示，删除任何一个结点都不会改变该表的地址。")]),t._v(" "),s("comment-comment")],1)}),[],!1,null,null,null);a.default=n.exports}}]);