import{_ as e,o as a,c as n,e as c}from"./app-d07a99ab.js";const d={},t=c(`<h1 id="创建-python-虚拟环境" tabindex="-1"><a class="header-anchor" href="#创建-python-虚拟环境" aria-hidden="true">#</a> 创建 <code>Python</code> 虚拟环境</h1><blockquote><p>如果你同时负责多个Python项目，或者想要轻松打包某个项目及其关联的库文件，再或者你担心已经安装的库之间会发生冲突，你可以创建一个虚拟环境来分而治之。</p></blockquote><h2 id="创建虚拟环境" tabindex="-1"><a class="header-anchor" href="#创建虚拟环境" aria-hidden="true">#</a> 创建虚拟环境</h2><p>在Linux终端里输入： <code>virtualenv env</code> 这样就创建了一个名为 <code>env</code> 的虚拟环境。如果提示 <code>virtualen：未找到命令</code> 的话， 安装一下这个命令就好了： <code>sudo apt-get install virtualenv</code></p><h2 id="激活虚拟空间" tabindex="-1"><a class="header-anchor" href="#激活虚拟空间" aria-hidden="true">#</a> 激活虚拟空间</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> <span class="token function">env</span>
<span class="token builtin class-name">source</span> bin/activate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>激活虚拟空间之后你会发现环境名称会出现在命令提示符前面。我这里显示： <code>(env) xu@xu-pc:~/env$:</code> 现在你安装的所有库和执行的程序都是在这个虚拟环境里进行的。</p><h2 id="退出环境" tabindex="-1"><a class="header-anchor" href="#退出环境" aria-hidden="true">#</a> 退出环境</h2><p>输入： <code>deactivate</code> 就会回到真实的全局环境。 将项目关联的所有库单独放在一个虚拟的环境里，可以轻松打包整个环境发送给其他人。只要他们的 <code>python</code> 版本和你的相同，你打包的代码就可以直接通过虚拟环境运行，不需要再安装任何库。</p><p>参考文献：《Python网络数据采集》Ryan Mitchell著</p>`,10),o=[t];function s(i,r){return a(),n("div",null,o)}const l=e(d,[["render",s],["__file","创建Python的虚拟环境.html.vue"]]);export{l as default};
