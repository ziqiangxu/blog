import{_ as a,r as i,o as s,c as r,a as e,b as o,d,e as n}from"./app-6fa196d2.js";const t={},p=n('<p>转了一圈，又回到了 <code>pipenv</code>, 它确实是更加现代的包管理工具，它是 <code>pip</code> 和 <code>virtualenv</code> 的结合体 它主要的改进在 <code>Pipfile.lock</code> 文件，它比一个纯文本的 <code>requirements.txt</code> 文件表达力要强得多。 更重要的是用 <code>pipreqs</code> 或 <code>freeze</code> 导出的包名、版本（生成一个 <code>requirements.txt</code> 文件）并不完全正确，它们是不可靠的，而 <code>pipenv</code> 是可靠的。</p><h2 id="为什么说-pipenv-是可靠的" tabindex="-1"><a class="header-anchor" href="#为什么说-pipenv-是可靠的" aria-hidden="true">#</a> 为什么说 <code>pipenv</code> 是可靠的</h2>',2),l=n("<li>而 <code>pipenv</code> 是在你安装依赖的时候就进行记录，理论上这是完全可靠的，这可以保证准确地记录你所安装的包，实际上也是可靠的。</li><li><code>pipenv</code> 使用 <code>Pipenv.lock</code> 文件记录了 <code>Python</code> 版本、软件包 <code>hash</code> 值、软件包版本、<code>pip</code> 仓库地址等重要信息。</li>",2),h=e("code",null,"Pipfile",-1),_=e("code",null,"Pipfile",-1),f={href:"https://lax.v2ex.com/t/461581",target:"_blank",rel:"noopener noreferrer"},u=n('<h2 id="为什么-freeze-不可靠和举例" tabindex="-1"><a class="header-anchor" href="#为什么-freeze-不可靠和举例" aria-hidden="true">#</a> 为什么 <code>freeze</code> 不可靠和举例</h2><ol><li><code>pipreqs</code> 和 <code>freeze</code> 这种工具是根据代码中的导入语句来进行分析，很有可能会出错，理论上是可靠的，但是实际上有副作用，因为这个过程比想象中的复杂。</li><li>比如说你有一个自定义的包叫 <code>config</code> ，然而<code>pip</code> 软件源里有<code>config</code> 这个包，它们就会多导出一个config依赖，而实际上你不需要这个包，只是你的包和源里的包重名了而已。</li><li>比如你的项目进行了 <code>yaml</code> 文件的读写， 用它们导出 <code>yaml</code> 相关的软件包试试？</li></ol>',2),v={href:"https://lax.v2ex.com/t/461581",target:"_blank",rel:"noopener noreferrer"},m=e("code",null,"pipenv",-1),x=n(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip3 <span class="token function">install</span> pipenv  <span class="token comment"># 安装pipenv工具</span>
pipenv <span class="token function">install</span>  <span class="token comment"># 从Pipfile.lock安装需要的依赖</span>
pipenv <span class="token function">bash</span>  <span class="token comment"># 启动虚拟环境，需在有Pipfile的目录下执行此命令</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),b={href:"https://pipenv.readthedocs.io/en/latest/",target:"_blank",rel:"noopener noreferrer"},k=n('<hr><h2 id="以下内容已过时-今后不在项目中使用-但是对于非正式部署的项目仍然有价值" tabindex="-1"><a class="header-anchor" href="#以下内容已过时-今后不在项目中使用-但是对于非正式部署的项目仍然有价值" aria-hidden="true">#</a> <strong>以下内容已过时，今后不在项目中使用，但是对于非正式部署的项目仍然有价值</strong></h2><h2 id="导出开发环境需要的所有依赖包清单" tabindex="-1"><a class="header-anchor" href="#导出开发环境需要的所有依赖包清单" aria-hidden="true">#</a> 导出开发环境需要的所有依赖包清单</h2><p>使用pip freeze <code>pip freeze &gt; requirements.txt</code></p><h2 id="导出项目所需要的依赖包清单" tabindex="-1"><a class="header-anchor" href="#导出项目所需要的依赖包清单" aria-hidden="true">#</a> 导出项目所需要的依赖包清单</h2><p>使用<code>pipreqs</code>命令 安装pipreqs：<code>pip install pipreqs</code> 导出指定项目需要的依赖包：<code>pipreqs --savepath=[导出文件的路径] [项目目录]</code></p><h2 id="安装依赖包" tabindex="-1"><a class="header-anchor" href="#安装依赖包" aria-hidden="true">#</a> 安装依赖包</h2><p><code>pip install -r [依赖文件清单]</code></p><h2 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h2><p>用<code>pipreqs</code>或<code>freeze</code>导出的包名、版本并不完全正确，比如<code>yaml</code>相关的。</p>',10);function g(q,z){const c=i("ExternalLinkIcon");return s(),r("div",null,[p,e("ol",null,[l,e("li",null,[h,o(" 拥有独立的解析步骤，且不需要先将套件实际安装至环境中，当你将一个会破坏依赖结构的包加入 "),_,o(" 时，locking就会直接告知你这个依赖无法被解析。【这个特性在进行软件包更新的时候尤其有用，"),e("a",f,[o("更多细节"),d(c)]),o("】")])]),u,e("p",null,[e("a",v,[o("看 "),m,o(" 项目的维护者说，它到底解决了什么？"),d(c)])]),x,e("p",null,[o("更加详细的"),e("a",b,[o("指南"),d(c)])]),k])}const y=a(t,[["render",g],["__file","为什么使用pipenv.html.vue"]]);export{y as default};
