import{_ as e,o,c,e as d}from"./app-c32f5dbb.js";const a={},t=d('<h1 id="vue-与-mvvm" tabindex="-1"><a class="header-anchor" href="#vue-与-mvvm" aria-hidden="true">#</a> <code>Vue</code> 与 <code>MVVM</code></h1><h2 id="m-、-v-、-vm-的含义" tabindex="-1"><a class="header-anchor" href="#m-、-v-、-vm-的含义" aria-hidden="true">#</a> <code>M</code> 、 <code>V</code> 、 <code>VM</code> 的含义</h2><ul><li><code>Model</code>： 数据模型</li><li><code>View</code>： <code>UI</code> 组件</li><li><code>ViewModel</code>： 同步 <code>View</code> 和 <code>Model</code> 的对象</li></ul><p><code>Vue</code> 专注于 <code>ViewModel</code>，<code>Vue</code> 可以说是 <code>MVVM</code> 架构的最佳实践，它是<code>GitHub</code> 上排名第一的 <code>js</code> 库</p><p>目前在写 <code>Qt</code> 项目的时候也使用了类似的思想，不过只做了模型到视图的单向绑定</p><p><a href="(https://www.cnblogs.com/onepixel/p/6034307.html)">这篇文章写得很不错</a></p>',6),i=[t];function l(r,n){return o(),c("div",null,i)}const h=e(a,[["render",l],["__file","Vue和MVVM.html.vue"]]);export{h as default};
