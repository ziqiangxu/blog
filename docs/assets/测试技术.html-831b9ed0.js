import{_ as r,r as n,o as s,c,a as e,b as a,d as o,e as i}from"./app-4c8b1a77.js";const h={},d=i('<h1 id="测试技术" tabindex="-1"><a class="header-anchor" href="#测试技术" aria-hidden="true">#</a> 测试技术</h1><p>测试是一个复杂的学科，测试是很重要的。</p><blockquote><p>Edsger W. Dijkstra said that “Program testing can be a very effective way to show the presence of bugs, but it is hopelessly inadequate for showing their absence.” 程序测试是查找当前程序bug的有效手段，但是它完全不足以显示程序（所有）的bug。</p></blockquote><p>虽然测试不足以显示程序所有的 <code>bug</code>，但是我们仍然应该尽力地去编写测试代码，以提高我们代码的正确性。</p><h2 id="分类" tabindex="-1"><a class="header-anchor" href="#分类" aria-hidden="true">#</a> 分类</h2><p><code>Rust</code> 社区将测试分为两类：</p><ul><li><code>unit tests</code> 单元测试</li><li><code>integration tests</code> 集成测试</li></ul><h3 id="单元测试" tabindex="-1"><a class="header-anchor" href="#单元测试" aria-hidden="true">#</a> 单元测试</h3><p>单元测试小而集中，在一个时间点独立地测试一个模块，可以测试私有的接口。</p><h3 id="集成测试" tabindex="-1"><a class="header-anchor" href="#集成测试" aria-hidden="true">#</a> 集成测试</h3><p>集成测试是在你的编写的库外部，像外部代码调用你的接口一样来进行测试，只能使用公共的接口。通常一个集成测试中使用多个模块。</p><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2>',12),l={href:"https://doc.rust-lang.org/book/ch11-00-testing.html",target:"_blank",rel:"noopener noreferrer"},p={href:"https://doc.rust-lang.org/book/ch11-03-test-organization.html#test-organization",target:"_blank",rel:"noopener noreferrer"};function u(_,g){const t=n("ExternalLinkIcon");return s(),c("div",null,[d,e("p",null,[e("a",l,[a("https://doc.rust-lang.org/book/ch11-00-testing.html"),o(t)]),e("a",p,[a("https://doc.rust-lang.org/book/ch11-03-test-organization.html#test-organization"),o(t)])])])}const f=r(h,[["render",u],["__file","测试技术.html.vue"]]);export{f as default};
